<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/03/08/Vue%E5%9F%BA%E7%A1%80-01%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/03/08/Vue%E5%9F%BA%E7%A1%80-01%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="vue-介绍"><a href="#vue-介绍" class="headerlink" title="vue 介绍"></a>vue 介绍</h2><h4 id="vue-概述"><a href="#vue-概述" class="headerlink" title="vue 概述"></a>vue 概述</h4><ul><li>特点：易用、灵活、高效</li><li>版本：2.6</li><li>作者：尤雨溪</li><li>兼容：IE8及以下不兼容</li></ul><h4 id="vue使用方法"><a href="#vue使用方法" class="headerlink" title="vue使用方法"></a>vue使用方法</h4><ol><li>引入 vue.js</li><li>创建挂载节点标签<ul><li>注意：不能再 body 和 html 标签上竞争挂载</li></ul></li><li>实例化 vue 对象<ul><li>el：挂载节点的选择器</li><li>data：模板中用到的所有数据</li></ul></li></ol><h4 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h4><ul><li>M model (data里面的数据)</li><li>V view (视图，就是模板)</li><li>VM (模拟模型)</li></ul><h2 id="vue-指令"><a href="#vue-指令" class="headerlink" title="vue 指令"></a>vue 指令</h2><ul><li>v-html 渲染内容，可以编译 html 字符串</li><li>v-text 渲染内容</li><li>v-cloak 防止闪烁</li><li>v-pre 跳过编译</li><li>v-once 一次性绑定</li><li>v-on 事件绑定</li><li>v-bind 属性绑定</li><li>v-model 双向数据绑定</li></ul><h2 id="vue-事件"><a href="#vue-事件" class="headerlink" title="vue 事件"></a>vue 事件</h2><h6 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h6><ol><li><p>v-on：事件类型=’事件函数’</p></li><li><p>@事件类型=’事件函数’</p></li></ol><h6 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h6><p>​    @事件类型=’事件函数(实参)’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> Vue(&#123;<br>    el: <span class="hljs-string">&#x27;&#x27;</span>,<br>    data: &#123;<br>        <br>    &#125;,<br>    methods: &#123;<br>        事件函数(形参) &#123;<br>            <br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h6 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h6><p>​    @事件类型=’事件函数($event)’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> Vue(&#123;<br>    el: <span class="hljs-string">&#x27;&#x27;</span>,<br>    data: &#123;<br>        <br>    &#125;,<br>    methods: &#123;<br>        事件函数(形参) &#123;<br>            <span class="hljs-comment">// 形参就是事件对象</span><br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h6 id="既传参又获取事件对象"><a href="#既传参又获取事件对象" class="headerlink" title="既传参又获取事件对象"></a>既传参又获取事件对象</h6><p>​    @事件类型=’事件函数($event，实参)’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> Vue(&#123;<br>    el: <span class="hljs-string">&#x27;&#x27;</span>,<br>    data: &#123;<br>        <br>    &#125;,<br>    methods: &#123;<br>        事件函数(形参<span class="hljs-number">1</span>，形参<span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-comment">// 形参1就是事件对象</span><br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h6 id="事件简写"><a href="#事件简写" class="headerlink" title="事件简写"></a>事件简写</h6><p>​    @事件类型=’变量赋值操作’</p><h4 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h4><h6 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h6><p>​        @事件类型.修饰符=’事件函数’</p><h6 id="修饰符内容"><a href="#修饰符内容" class="headerlink" title="修饰符内容"></a>修饰符内容</h6><ul><li><p>.stop</p></li><li><p>.prevent</p></li><li><p>.self</p></li><li><p>.capture</p></li><li><p>.once</p><h6 id="按键修饰符-一般用于-input-和-textarea"><a href="#按键修饰符-一般用于-input-和-textarea" class="headerlink" title="按键修饰符(一般用于 input 和 textarea)"></a>按键修饰符(一般用于 input 和 textarea)</h6><ul><li>keydown</li><li>keyup</li><li>keypress</li><li>input</li></ul></li></ul><h2 id="vue-样式"><a href="#vue-样式" class="headerlink" title="vue 样式"></a>vue 样式</h2><h4 id="class"><a href="#class" class="headerlink" title="class"></a>class</h4><h6 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h6><p>​        ：class=’{class名1：变量1，class名2：变量2}’</p><h6 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h6><p>​        ：class=’[变量1，变量2，’class名1’，’class名2’]’</p><h6 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h6><p>​        ：class=’条件？’class名1’：’class名2’’</p><h4 id="style"><a href="#style" class="headerlink" title="style"></a>style</h4><h6 id="对象-1"><a href="#对象-1" class="headerlink" title="对象"></a>对象</h6><p>​        ：style=’{css属性名1：变量1，css属性名2：变量2}’</p><h6 id="数组-1"><a href="#数组-1" class="headerlink" title="数组"></a>数组</h6><p>​        ：style=’[变量1，变量2]’</p><p>​                变量1：{css属性名1：css属性值1}</p><p>​                变量2：{css属性名2：css属性值2}</p><h6 id="属性绑定-1"><a href="#属性绑定-1" class="headerlink" title="属性绑定"></a>属性绑定</h6><p>​        <strong>字符串拼接和模板字符串</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;h3 :style=<span class="hljs-string">&quot;&#x27;background-color:&#x27;+bgc+&#x27;;font-size: &#x27;+num+&#x27;px;&#x27;&quot;</span>&gt;会呵呵呵呵&lt;/h3&gt;<br>    &lt;h3 :style=<span class="hljs-string">&quot;`background-color:$&#123;bgc&#125;;font-size:$&#123;num&#125;px;`&quot;</span>&gt;会呵呵呵呵&lt;/h3&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/26/session%20%E5%92%8C%20JWT%20%E6%80%BB%E7%BB%93/"/>
    <url>/2021/02/26/session%20%E5%92%8C%20JWT%20%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h4 id="session-总结"><a href="#session-总结" class="headerlink" title="session 总结"></a>session 总结</h4><ol><li>session 工作机制</li></ol><p>浏览器发送登录请求(首次五 sessionID)，服务器生成 session，向浏览器响应数据并写入sid 数据到 cookie 中，浏览器自动保存 cookie，再次发送请求时，自动携带 cookie 信息，服务器根据 cookie 中的 sid 值获取对应的 session 数据，匹配成功后，对应的用户信息返回给浏览器，浏览器渲染到页面上</p><ol start="2"><li>session 认证的局限性</li></ol><p>sessionID 需要借助 cookie 手段存放在浏览器，当涉及到前端跨域请求后端接口时，需要做额外的配置才能实现 session 的认证 ，推荐使用 JWT 这种认证方式，没有和 cookie 的绑定关系</p><h4 id="JWT-总结"><a href="#JWT-总结" class="headerlink" title="JWT 总结"></a>JWT 总结</h4><ol><li>jwt 的工作机制</li></ol><p>浏览器发送登录请求，服务器验证用户信息，把信息加密后生成 token 返回，浏览器存储 token 信息(一般存放到 localhost 本地存储中)，再次发送请求，在请求头的 Authorization 字段携带上了 token，服务器解密 token 信息，解密成功，对应的用户信息返回给浏览器，浏览器渲染到页面上</p><ol start="2"><li>JWT 的组成部分</li></ol><p>通常由三部分组成，使用英文符号进行分隔， Header(头部)，Payload(有效荷载，存放的是经过加密后的用户信息)，Signature(签名)</p><ol start="3"><li>JWT 使用方式</li></ol><p>服务端签发 token 到客户端中，可以存储到 localhost 中，每次发送请求前都要带上这个 token，推荐放在 HTTP 请求头的 Authorization 字段中</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SQL</title>
    <link href="/2021/02/24/sql%E8%AF%AD%E5%8F%A5/"/>
    <url>/2021/02/24/sql%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<p>查询语句<br>1.查询所有的数据<br>select * from users<br>2.查询指定列的数据<br>select username=’’, password=’’ from users<br>3.插入语句<br>insert into users (username, password) values (‘xm’, ‘123456’)<br>4.更新语句<br>例如：把表中 id 为4的用户名密码修改为abcdef<br>update users set password=’abcdef’ where id=4<br>5.删除语句<br>例如：把表中 id 为4的用户删除<br>delete from users where id=4<br>6.升序降序<br>例如：查询表中所有的用户根据 status 升序 id 降序排列<br>select * from users order by status asc, id desc</p>]]></content>
    
    
    <categories>
      
      <category>菜鸟</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
      <tag>hello</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>模块的加载机制</title>
    <link href="/2021/02/21/%E6%A8%A1%E5%9D%97%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <url>/2021/02/21/%E6%A8%A1%E5%9D%97%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<p>模块的加载机制</p><p>模块优先从缓存中进行加载</p><p>模块在第一次加载后会被缓存，如果每次调用 require(‘foo’) 都解析到同一文件，则返回相同的对象，不会导致模块的代码被执行多次</p><p>缓存的作用</p><p>不论是 node.js 内置的核心模块，用户自定义的模块还是第三方模块，都有对应的缓存策略，提升模块的加载效率</p><ol><li><p>核心模块的加载机制<br>require() 总是会优先加载核心模块，例如 require(‘http’) 始终返回内置的 HTTP 模块，即使有同名文件</p></li><li><p>自定义模块的加载机制</p><ul><li>使用 require() 方法加载自定义模块，必须使用 ‘/‘ 、 ‘../‘ 或 ‘./‘ 开头的路径，如果不添加路径标识，node 会默认把它当做是一个核心模块或来自 node_modules 目录下的第三方模块</li><li>如果按确切的文件名没有找到模块，则 node.js 会尝试带上 .js 、.json 或 .node 拓展名在加载</li><li>加载顺序遵从  在加载的目录下查找 package.json 的文件，并寻找 main 属性作为 require 的入口，上述找不到，node.js 会尝试带上 .js 、.json 或 .node 拓展名在加载</li></ul></li><li><p>第三方模块的加载机制<br>如果传递给 require() 的模块标识符不是一个核心模块，也没有以 ‘/‘ 、 ‘../‘ 或 ‘./‘ 开头， 那么 Node.js 会从当前模块的父目录开始，尝试从它的 /node_modules 目录里加载模块。如果还是没有找到，则移动到再上一层父目录，直到文件系统的根目录。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>菜鸟</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
      <tag>hello</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>npm</title>
    <link href="/2021/02/21/npm%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/02/21/npm%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>下载一个指定的包<br>    <code>npm i 包的具体名称</code> </p><p>查看一个指定包<br>    <code>npm view 包的具体名称</code></p><p>下载指定版本的包<br>    <code>npm i 包的具体名称@版本号</code></p><p>快速创建包管理配置文件<br>    在项目的根目录下执行 <code>npm init -y</code> 命令</p><p>卸载指定的包<br>    执行 <code>npm uninstall 包名称</code></p><p>安装开发测试阶段用到的包<br>    执行命令 <code>npm i --save-dev 包名称@版本号</code> 或 <code>npm i -D 包名称@版本号</code></p><p>使用 nrm 切换源<br>    在任意目录下依次执行：<code>npm i -g nrm</code> ==&gt; <code>nrm ls</code> ==&gt;<code>nrm use taobao</code></p><p>使用一个把 markdown 格式的文档转成 html 格式文件的工具包<br>    1. 安装全局包： npm i -g i5ting_toc<br>    2. 使用全局命令： <code>i5ting_toc -f 要转换的md文件 index.html</code></p>]]></content>
    
    
    <categories>
      
      <category>菜鸟</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
      <tag>hello</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ajax</title>
    <link href="/2021/02/07/Ajax%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/02/07/Ajax%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p> 三种请求方式</p><ol><li><p>$.get(url, [data], callback)</p></li><li><p>$.post(url, [data], callback)</p></li><li><p>$.ajax({url,method,data,success})<br>data 参数：可以是对象格式也可以是字符串格式，get 请求可以吧参数直接拼接到 url 后面</p><p>Form 表单</p></li><li><p>作用: 用来数据采集，收集用户填写的数据</p></li><li><p>组成部分：<br>form 标签<br>文本域  隐藏域 hidden  文件上传 file 复选框 checkbox<br>提交按钮</p></li><li><p>form 标签上的属性：<br>action 表单提交的 url 地址<br>target: _self/_blank 表示在新标签页还是当前页打开 url<br>method：get/post 请求方式<br>enctype: 参数的编码方式：<br>(1) application/x-www-form-urlencoded<br>(2) mutipart/form-data (二进制数，文件上传)<br>(3) text/plain</p></li><li><p>提交数据的缺点：<br>会刷新页面，之前的数据和状态会消失<br>采取的方案：使用 ajax 发送请求，避免页面的刷新</p><pre><code>    配合阻止表单的默认行为的方法：e.preventDefault()</code></pre></li><li><p>form 表单中的事件：<br>form.submit(function(e) {// 获取所有的表单参数 $(this).serialize() // 还原表单内容 this.reset()})       </p><p>模板引擎</p></li><li><p>所有的数据，变量，表达式，都必须用 双花括号 来进行包裹</p></li><li><p>渲染原本的 html 标签 @value</p></li><li><p>根据条件输出模板 if </p></li><li><p>循环遍历输出模板 each </p></li><li><p>过滤器：<br>template.defaults.imports.方法名(foo) = function(参数) {}</p><p>xhr 的新特性</p></li><li><p>设置请求超时的方法<br>xhr.timeout = 300<br>xhr.ontimeout = function() {}</p></li><li><p>使用 new FormData() 管理表单数据：<br>创建一个 formdata 数据 var fd = new FormData()<br>新增一条数据 fd.append(‘avatar’, ‘hello’)<br>遍历所有的数据 fd.forEach(fn)<br>设置某一条数据 fd.set(‘name’, ‘hello’)<br>一次性获取 form 表单中所有的内容 $(‘form’).serialize() 键值对字符串</p><pre><code>                        var fd = new FormData($(&#39;form&#39;)[0]) 获取 formdata 类型的表单数据</code></pre></li><li><p>实现文件上传的步骤：<br>获取用户上传列表 ipt.files<br>判断是否上传 ipt.files.length == 0<br>使用 formdata 去提交文件 fd.append(‘avatar’, ipt.files[0])<br>发送 ajax 的四部曲 var xhr = new XMLHttpRequest()</p><pre><code>           xhr.open(&#39;POST&#39;, url)           xhr.send(fd)</code></pre><p>xhr.onreadystatechange=function(){}                               </p></li><li><p>如何监听文件上传的进度<br>xhr.upload.onprogress = function(e) {e.loaded(已经上传的)/e.total(总数量) * 100}<br>xhr.upload.onload = function(e) {// 已经上传完成的}<br>特点：基于 Promise 的 Http请求库，可以同时在浏览器和Node.js平台使用<br>发送 GET 请求 axios.get(url?name=tom&amp;age=10)<br>.then(res =&gt; {console.log(res)})<br>.catch(res =&gt; {console.log(err)})<br>发送 POST 请求<br>axios.post(url, {name: ‘tom’, age: 10})<br>.then(res =&gt; {console.log(res)})<br>.catch(res =&gt; {console.log(err)})<br>axios({url:url,method: ‘get/post’,// get 请求params: {}// post 请求data: {}})<br>.then(res =&gt; {console.log(res)})<br>.catch(res =&gt; {console.log(err)})<br>返回数据 res (包装后的数据对象)，res.data [服务器真是响应的数据内容]</p><p>同源和跨域解决</p></li><li><p>同源的概念：两个 url 满足 协议，域名，端口号必须一致</p></li><li><p>同源策略：浏览器提供的一种安全策略，限制一个网站去放另一个网站的资源</p></li><li><p>跨域的原因：就是流浪器的同源策略</p></li><li><p>跨域的解决方案：<br>CORS 方案，服务端 的解决方案(在响应头中添加 Access-Content-Allow-Origin)<br>JSONP方案<br>代理服务器，前端本地开发(proxy 插件)<br>在流浪器中手动关闭同源策略</p></li><li><p>JSONP 的实现原理<br>利用 script 标签可以跨域的特性去请求资源</p></li><li><p>JQuery版本的JSONP实现：<br>核心： $.ajax({dataType: ‘jsonp’,jsonp: ‘cbk’,jsonpCallback: ‘foo’})</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>菜鸟</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
      <tag>hello</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS高级</title>
    <link href="/2021/02/07/JS%E9%AB%98%E7%BA%A7%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/02/07/JS%E9%AB%98%E7%BA%A7%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p> 实例成员和静态成员</p><ol><li><p>只能通过实例对象才能访问道德属性和方法</p></li><li><p>只能通过构造函数本身才能访问的属性和方法</p><p>构造函数的原型</p></li><li><p>每个函数都有一个 prototype 属性，它的值是默认是一个对象</p></li><li><p>在 prototype 对象上的方法和属性会被 new 构造函数创建出来的实例对象所继承</p></li><li><p>注意： 只要有函数都具有 prototype 属性， 非函数不具有 prototype 属性</p><p>constructor 构造函数<br>如果修改了原来的原型对象，给原型对象赋值的是一个对象，则必须手动的利用 constructor 指回原来的构造函数</p><p>原型链</p></li><li><p>当访问你对象的属性时，首先从这个对象自身进行查找 </p></li><li><p>如果没有找到就con他的原型对象 <strong>proto</strong> 中查找</p></li><li><p>如果还没有找到，继续沿着对象的原型链层层向上查找，直到最末尾的 null</p><p>数组方法</p></li><li><p>快速遍历数组  arr.forEach()</p></li><li><p>从数组中筛选出所有符合条件的元素  var res = arr.filter() 返回值是一个新数组</p></li><li><p>判断数组中是否存储某个符合条件的元素 arr.some()</p></li><li><p>判断数组中是否所有的元素都符合条件 arr.every()<br>区别：forEach 和 filter 会完整的遍历数组，some，every 不会</p><p>闭包(重点)</p></li><li><p>内部函数访问外部函数声明的变量，这种组合方式就叫做闭包</p></li><li><p>垃圾回收机制：垃圾回收机制会定期定期好处那些不再用到的内存，然后释放内存<br>闭包产身的原因： 当一个函数内声明的变量没有被其他的函数引用是，调用完这个函数后，所有的局部变量就会被垃圾回收机制清除</p><pre><code>         一旦这个变量被另一个函数所引用，这个变量的值会始终保存在内存中，不会被垃圾回收机制回收，从而形成了闭包</code></pre></li><li><p>闭包的作用：<br>优点： 延伸了变量的使用范围<br>   实现了数据的封装<br>   实现了数据的缓存<br>缺点：闭包会使得函数中的变量都被保存在内存中，加大了内存消耗<br>  容器引发内存泄漏</p><p>高阶函数</p></li><li><p>分类高阶函数是对其他函数进行操作的函数<br>把函数作为参数的函数<br>把函数作为返回值的函数</p><p>递归函数<br>函数内部自己调用自己，作用和循环效果类似<br>递归很容易发生栈溢出错误，所以和 while 循环类似必须要添加终端条件</p><p>浅拷贝和深拷贝</p></li><li><p>浅拷贝只拷贝对象一层的数据，复杂数据类型只拷贝内存地址值(引用同一个对象)</p></li><li><p>拷贝对象多层的数据，遇到复杂数据类型会继续新建一个空间，拷贝里面每一层的属性和值<br>区别：深拷贝后的对象和原型对象是完全隔离的，各自互不影响，而浅拷贝中所有的复杂数据类型的值都是共同引用的 </p><p>es6 声明变量：<br>let 声明变量：不会挂载到 window 上 </p><pre><code>      不会存在变量提升      暂存死区，存在但是访问不到      只在当前声明变量的块级或字块中使用      变量名不能重复</code></pre><p>正则表达式：<br>语法： new RegExp(/123/)</p><p>this 指向 (重点)</p></li><li><p>在构造函数中，里面的 this 指向的是对象实例，原型对象函数里面的 this 直线 的是实例对象</p></li><li><p>非函数作用域中的 this 指向window</p></li><li><p>函数中的 this 默认指向函数的调用者 其中 call，apply，bind 手动改变函数的 this 指向</p></li><li><p>严格模式下的 this 指向：<br>全部作用域中的 this 是 undefined<br>构造函数不加 new 调用， this 指向的是 undefined 如果给他赋值就会报错<br>定时器 this 还是指向 window</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>菜鸟</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
      <tag>hello</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>扬帆起航</title>
    <link href="/2021/01/28/hello-world/"/>
    <url>/2021/01/28/hello-world/</url>
    
    <content type="html"><![CDATA[<h3 id="JS高级笔记"><a href="#JS高级笔记" class="headerlink" title="JS高级笔记"></a>JS高级笔记</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>]]></content>
    
    
    <categories>
      
      <category>菜鸟</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
      <tag>hello</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
