<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JS高级</title>
    <link href="/2021/02/07/JS%E9%AB%98%E7%BA%A7%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/02/07/JS%E9%AB%98%E7%BA%A7%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>实例成员和静态成员</p><ol><li><p>只能通过实例对象才能访问道德属性和方法</p></li><li><p>只能通过构造函数本身才能访问的属性和方法</p><p>构造函数的原型</p></li><li><p>每个函数都有一个 prototype 属性，它的值是默认是一个对象</p></li><li><p>在 prototype 对象上的方法和属性会被 new 构造函数创建出来的实例对象所继承</p></li><li><p>注意： 只要有函数都具有 prototype 属性， 非函数不具有 prototype 属性</p><p>constructor 构造函数<br>如果修改了原来的原型对象，给原型对象赋值的是一个对象，则必须手动的利用 constructor 指回原来的构造函数</p><p>原型链</p></li><li><p>当访问你对象的属性时，首先从这个对象自身进行查找 </p></li><li><p>如果没有找到就con他的原型对象 <strong>proto</strong> 中查找</p></li><li><p>如果还没有找到，继续沿着对象的原型链层层向上查找，直到最末尾的 null</p><p>数组方法</p></li><li><p>快速遍历数组  arr.forEach()</p></li><li><p>从数组中筛选出所有符合条件的元素  var res = arr.filter() 返回值是一个新数组</p></li><li><p>判断数组中是否存储某个符合条件的元素 arr.some()</p></li><li><p>判断数组中是否所有的元素都符合条件 arr.every()<br>区别：forEach 和 filter 会完整的遍历数组，some，every 不会</p><p>闭包(重点)</p></li><li><p>内部函数访问外部函数声明的变量，这种组合方式就叫做闭包</p></li><li><p>垃圾回收机制：垃圾回收机制会定期定期好处那些不再用到的内存，然后释放内存<br>闭包产身的原因： 当一个函数内声明的变量没有被其他的函数引用是，调用完这个函数后，所有的局部变量就会被垃圾回收机制清除</p><pre><code>         一旦这个变量被另一个函数所引用，这个变量的值会始终保存在内存中，不会被垃圾回收机制回收，从而形成了闭包</code></pre></li><li><p>闭包的作用：<br>优点： 延伸了变量的使用范围<br>   实现了数据的封装<br>   实现了数据的缓存<br>缺点：闭包会使得函数中的变量都被保存在内存中，加大了内存消耗<br>  容器引发内存泄漏</p><p>this 指向 (重点)</p></li><li><p>在构造函数中，里面的 this 指向的是对象实例，原型对象函数里面的 this 直线 的是实例对象</p></li><li><p>非函数作用域中的 this 指向window</p></li><li><p>函数中的 this 默认指向函数的调用者 其中 call，apply，bind 手动改变函数的 this 指向</p></li><li><p>严格模式下的 this 指向：<br>全部作用域中的 this 是 undefined<br>构造函数不加 new 调用， this 指向的是 undefined 如果给他赋值就会报错<br>定时器 this 还是指向 window</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>菜鸟</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
      <tag>hello</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>扬帆起航</title>
    <link href="/2021/01/28/hello-world/"/>
    <url>/2021/01/28/hello-world/</url>
    
    <content type="html"><![CDATA[<h3 id="JS高级笔记"><a href="#JS高级笔记" class="headerlink" title="JS高级笔记"></a>JS高级笔记</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>]]></content>
    
    
    <categories>
      
      <category>菜鸟</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
      <tag>hello</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
